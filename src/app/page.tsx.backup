"use client"

import React, { useState, useEffect } from 'react'
import { Hero } from '@/components/hero'
import { Section } from '@/components/section'
import { Stat } from '@/components/stat'
import { ProjectCard } from '@/components/project-card'
import { LogoStrip } from '@/components/logo-strip'
import { Button } from '@/components/ui/button'
import { ArrowRight, Briefcase, Code, MessageSquare, Sparkles, ChevronDown, ChevronUp, ExternalLink, Github } from 'lucide-react'
import { useContent } from '@/lib/content'
import Link from 'next/link'
import ClientsSection from '@/components/clients-section'
import { type Content } from '@/types/content'
import { Timeline } from '@/components/timeline'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import Image from 'next/image'

// Metadata is now in a separate metadata.ts file

export default function Home() {
  const { content, isLoading, error } = useContent()
  const [showAllWork, setShowAllWork] = useState(false)
  const [showFullTimeline, setShowFullTimeline] = useState(false)
  const [showAllSystems, setShowAllSystems] = useState(false)
  const [selectedProject, setSelectedProject] = useState<any>(null)
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading content...</p>
        </div>
      </div>
    )
  }

  if (error || !content) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-500 mb-4">Error loading content</p>
          <Button onClick={() => window.location.reload()}>Try Again</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Hero 
        {...content.hero} 
        ctaPrimary={{
          text: content.hero.ctas?.[0]?.label || 'View Work',
          href: content.hero.ctas?.[0]?.href || '/work'
        }}
        ctaSecondary={{
          text: content.hero.ctas?.[1]?.label || 'Contact',
          href: content.hero.ctas?.[1]?.href || '/contact'
        }}
      />
      
      {/* Clients Section - Moved before highlights */}
      <ClientsSection />
      
      {/* Stats Section */}
      <Section className="bg-muted/50" id="highlights">
        <div className="grid grid-cols-2 gap-6 md:grid-cols-3">
          {content.highlights.map((highlight, index) => (
            <Stat
              key={index}
              value={highlight.value}
              label={highlight.label}
              description={highlight.desc}
            />
          ))}
        </div>
      </Section>
      
      {/* Featured Work */}
      <Section id="work">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-3xl font-bold tracking-tight sm:text-4xl">
            Featured Work
          </h2>
        </div>

        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {content.caseStudies
            .slice(0, showAllWork ? undefined : 3)
            .map((project) => (
              <Dialog key={project.slug}>
                <DialogTrigger asChild>
                  <div className="cursor-pointer">
                    <ProjectCard
                      title={project.title}
                      description={project.summary}
                      cover={project.cover}
                      tags={project.stack ?? []}
                      year={project.year}
                      href={`#`}
                    />
                  </div>
                </DialogTrigger>
                <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle className="text-2xl">{project.title}</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-6">
                    {project.cover && (
                      <div className="relative h-64 w-full overflow-hidden rounded-lg">
                        <Image
                          src={project.cover.src}
                          alt={project.cover.alt}
                          fill
                          className="object-cover"
                          sizes="(max-width: 768px) 100vw, 800px"
                        />
                      </div>
                    )}
                    
                    <div className="flex flex-wrap gap-2">
                      {(project.stack ?? []).map(tech => (
                        <Badge key={tech} variant="outline">
                          {tech}
                        </Badge>
                      ))}
                      <span className="text-sm text-muted-foreground ml-2">
                        {project.year}
                      </span>
                    </div>
                    
                    <p className="text-lg text-muted-foreground">
                      {project.summary}
                    </p>
                    
                    {Array.isArray(project.whyItWorks) && project.whyItWorks.length > 0 && (
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Why it works</h3>
                        <ul className="list-disc list-inside space-y-1">
                          {project.whyItWorks.map((item: string) => (
                            <li key={item}>{item}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {Array.isArray(project.metrics) && project.metrics.length > 0 && (
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Metrics</h3>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                          {project.metrics.map((m: any) => (
                            <div key={m.label} className="text-center p-3 bg-muted/50 rounded-lg">
                              <div className="text-2xl font-bold text-primary">{m.value}</div>
                              <div className="text-sm text-muted-foreground">{m.label}</div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    <div className="flex flex-wrap gap-4 pt-4">
                      {project.links?.demo && (
                        <Button asChild>
                          <a href={project.links.demo} target="_blank" rel="noopener noreferrer">
                            View Live
                            <ExternalLink className="ml-2 h-4 w-4" />
                          </a>
                        </Button>
                      )}
                      {project.links?.repo && (
                        <Button asChild variant="outline">
                          <a href={project.links.repo} target="_blank" rel="noopener noreferrer">
                            <Github className="mr-2 h-4 w-4" />
                            View Code
                          </a>
                        </Button>
                      )}
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            ))}
        </div>
        
        {content.caseStudies.length > 3 && (
          <div className="text-center mt-8">
            <Button
              variant="outline"
              onClick={() => setShowAllWork(!showAllWork)}
              className="group"
            >
              {showAllWork ? 'Show Less' : `Show All ${content.caseStudies.length} Projects`}
              {showAllWork ? (
                <ChevronUp className="ml-2 h-4 w-4" />
              ) : (
                <ChevronDown className="ml-2 h-4 w-4" />
              )}
            </Button>
          </div>
        )}
      </Section>
      
      {/* About (condensed) */}
      <Section id="about">
        <div className="mx-auto max-w-4xl">
          <h2 className="text-3xl font-bold tracking-tight sm:text-4xl mb-6">
            About
          </h2>
          <div
            className="prose prose-lg dark:prose-invert max-w-none mb-8"
            dangerouslySetInnerHTML={{ __html: content.about.summary }}
          />
          <div>
            <h3 className="text-xl font-semibold mb-4">Technologies &amp; Tools</h3>
            <div className="space-y-4">
              {content.about.skills.map((group) => (
                <div key={group.category} className="space-y-2">
                  <h4 className="text-lg font-medium text-primary">{group.category}</h4>
                  <div className="flex flex-wrap gap-2">
                    {group.items.map((skill) => (
                      <Badge key={skill} variant="secondary" className="px-3 py-1 text-sm">
                        {skill}
                      </Badge>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </Section>
      
      {/* Timeline (collapsed by default) */}
      <Section className="bg-muted/50" id="timeline">
        <div className="mx-auto max-w-4xl">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl">
              Professional Timeline
            </h2>
            <p className="mt-2 text-muted-foreground">Experience and education</p>
          </div>
          <Timeline items={(showFullTimeline ? content.about.experience : content.about.experience.slice(0, 3)).map(exp => ({
            title: exp.role,
            company: exp.company,
            location: exp.location || '',
            startDate: exp.startDate || '',
            endDate: exp.endDate || '',
            description: exp.responsibilities || [],
            current: exp.current || false
          }))} />
          {content.about.experience.length > 3 && (
            <div className="text-center mt-8">
              <Button
                variant="outline"
                onClick={() => setShowFullTimeline(!showFullTimeline)}
                className="group"
              >
                {showFullTimeline ? 'Show Less' : `Show Full Timeline (${content.about.experience.length} items)`}
                {showFullTimeline ? (
                  <ChevronUp className="ml-2 h-4 w-4" />
                ) : (
                  <ChevronDown className="ml-2 h-4 w-4" />
                )}
              </Button>
            </div>
          )}
        </div>
      </Section>

      {/* Systems */}
      <Section id="systems">
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl">
              Systems & Tools
            </h2>
            <p className="mt-2 text-muted-foreground">
              Internal tools and systems I've built to improve workflows
            </p>
          </div>
        </div>

        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {content.systems
            .slice(0, showAllSystems ? undefined : 2)
            .map((system) => (
              <div key={system.slug} className="group relative overflow-hidden rounded-lg border bg-background p-6 hover:shadow-lg transition-shadow">
                <div className="space-y-4">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <h3 className="font-semibold text-lg">{system.title}</h3>
                      <p className="text-sm text-muted-foreground">{system.subtitle}</p>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap gap-2">
                    {(system.stack ?? []).map(tech => (
                      <Badge key={tech} variant="outline" className="text-xs">
                        {tech}
                      </Badge>
                    ))}
                  </div>
                  
                  {system.outcomes && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium">Outcomes:</h4>
                      <ul className="text-sm text-muted-foreground space-y-1">
                        {system.outcomes.map((outcome: string) => (
                          <li key={outcome} className="flex items-center">
                            <span className="w-1.5 h-1.5 bg-primary rounded-full mr-2 flex-shrink-0" />
                            {outcome}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {system.repo && (
                    <div className="pt-2">
                      <Button asChild variant="outline" size="sm">
                        <a href={system.repo} target="_blank" rel="noopener noreferrer">
                          <Github className="mr-2 h-3 w-3" />
                          View Code
                        </a>
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            ))}
        </div>
        
        {content.systems.length > 2 && (
          <div className="text-center mt-8">
            <Button
              variant="outline"
              onClick={() => setShowAllSystems(!showAllSystems)}
              className="group"
            >
              {showAllSystems ? 'Show Less' : `Show All ${content.systems.length} Systems`}
              {showAllSystems ? (
                <ChevronUp className="ml-2 h-4 w-4" />
              ) : (
                <ChevronDown className="ml-2 h-4 w-4" />
              )}
            </Button>
          </div>
        )}
      </Section>

      {/* Clients Section moved to top */}

      {/* CTA Section */}
      <Section className="text-center" id="contact">
        <div className="mx-auto max-w-2xl">
          <div className="mb-8 flex justify-center">
            <div className="rounded-full bg-primary/10 p-4">
              <MessageSquare className="h-8 w-8 text-primary" />
            </div>
          </div>
          <h2 className="text-3xl font-bold tracking-tight sm:text-4xl">
            Let's work together
          </h2>
          <p className="mx-auto mt-4 max-w-xl text-lg text-muted-foreground">
            {content.contact.note}
          </p>
          <div className="mt-8 flex flex-wrap justify-center gap-4">
            <Button asChild size="lg">
              <a href={`mailto:${content.contact.email}`}>Get in touch</a>
            </Button>
            <Button asChild variant="outline" size="lg">
              <a href={`mailto:${content.contact.email}?subject=Project Inquiry`}>Email directly</a>
            </Button>
          </div>
        </div>
      </Section>


    </div>
  )
}
